#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void print_relation(char flames_relation);
int get_unmatched_char_count(char first_name[], char second_name[]);
char get_flames_relation(int unmatched_char_count);
 
int main()
{
char first_name[100], second_name[100];
{
fgets(first_name,100,stdin);
fgets(second_name,100,stdin);
   for(int i = 0; first_name[i]!='\0';i++)
  {
      if(first_name[i]>='A' && first_name[i]<='Z')
      first_name[i]=first_name[i]+32;
  }
     for(int i = 0; second_name[i]!='\0';i++)
  {
      if(second_name[i]>='A' && second_name[i]<='Z')
      second_name[i]=second_name[i]+32;
  }
  int i,j, k=0, unmatched_char_count;
  char flames_relation;
  //This function will return the number of unmatched letters
  unmatched_char_count=get_unmatched_char_count(first_name, second_name);
  flames_relation = get_flames_relation(unmatched_char_count);
  print_relation(flames_relation);
 
return 0;
}
}
 
//Print the relationship based on flames_alphabet
void print_relation(char flames_alphabet) 
{
  switch(flames_alphabet) 
  {
    case 'F':
    case 'f':
      printf("friendship");
      break;
    case 'L':
    case 'l':
      printf("love");
      break;
    case 'A':
    case 'a':
      printf("affection");
      break;
    case 'M':
    case 'm':
      printf("marriage");
      break;
    case 'E':
    case 'e':
      printf("enemy");
      break;
    case 'S':
    case 's':
      printf("sister");
      break;
  }
}
int get_unmatched_char_count(char first_name[], char second_name[]) 
{
  int i,j;
  //Compare each characters of these names and assign "*"
  //in which both names had same character
  for(i=0; first_name[i]; i++) 
  {
    for(j=0; second_name[j]; j++)
    {
      if(first_name[i] == second_name[j])
      {
        first_name[i] = '*';
        second_name[j] = '*';
        break;
      }
    }
  }
 
  //Count the characters except "*".
  //So that we can get unique characters in both the names
  int unmatched_char_count = 0;
  for(i=0; first_name[i]; i++)
  {
    if(first_name[i] != '*') 
    {
      unmatched_char_count++;
    }
  }
   
  for(j=0; second_name[j]; j++) {
    if(second_name[j] != '*') 
    {
      unmatched_char_count++;
    }
  }
   
  return unmatched_char_count;
}
 
//Find the relationship based on unmatched letters count
char get_flames_relation(int unmatched_char_count) 
{
  char f[] = "FLAMES";
  /*int k=0, i, j;
   
  for(i=1; i<=5; i++) {
    for(j=1; j<=unmatched_char_count; j++) {
      if(f[k] == '*')
        j--;
       
      if(j == unmatched_char_count) {
        f[k] = '*';     
      }
       
      k = (k+1) % 6;
    }
  }
   
  for(i=0; i<=5; i++) {
    if(f[i] != '*') 
    {
      return f[i];
    }
  }*/
   int str_len = 6,idx = 0, flames_count=0;
   while(str_len > 0)
        {
            flames_count++;            
            if(idx == str_len-1)
            {
                idx = 0;
            }
            else
            {
                idx++;
            }
            if(flames_count == unmatched_char_count)
            {   
                int j = 0;
                if(idx == 0)
                {
                   j = str_len - 1; 
                }
                else
                {
                  j = --idx;  
                }
                while(j < str_len - 1)
                {
                    f[j] = f[j+1];
                    j++;
                }
                flames_count = 0;
                str_len--;
            }
        }
        return f[0];
}
